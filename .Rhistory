df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
return(df[["species_code"]])
}
eco_guess("comon")
eco_guess <- function(common) {
# Make common input lower case
common <- tolower(common)
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
sp_code <- df[["species_code"]]
}
eco_guess("comon fig")
eco_guess("comon")
eco_guess <- function(common) {
# Make common input lower case
common <- tolower(common)
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
df[["species_code"]]
}
eco_guess("comon")
eco_guess <- function(common) {
# Make common input lower case
common <- tolower(common)
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
sp_code <- df[["species_code"]]
}
eco_guess("comon")
eco_guess <- function(common) {
# Make common input lower case
common <- tolower(common)
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
invisible(df[["species_code"]])
}
eco_guess("comon")
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_guess <- function(common) {
# Make common input lower case
common <- tolower(common)
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
invisible(df[["species_code"]])
}
x <- eco_guess("comon")
x
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_guess <- function(common) {
# Make common input lower case
common <- tolower(common)
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, common)
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
# Message user to let them know what species we're going with
cat("You entered '", common, "'. Closest match is '", df[["common_name"]], "'. Using closest match.", sep = "")
invisible(df[["species_code"]])
}
x <- eco_guess("comon")
x
x <- eco_guess("comon fig")
x
devtools::load_all(".")
eco_demo()
eco_run("comon fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("comon fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("comon fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("comon fig", 20, "InlEmpCLM")
eco_run("maple", 20, "InlEmpCLM")
eco_run("red maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("red maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("red maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("red maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("red maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("red maple", 20, "InlEmpCLM")
eco_run("red mapl", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("red maple", 20, "InlEmpCLM")
eco_run("maple", 20, "InlEmpCLM")
eco_run("rd maple", 20, "InlEmpCLM")
eco_run("red maple", 20, "InlEmpCLM")
eco_run("maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("maple", 20, "InlEmpCLM")
eco_run("red maple", 20, "InlEmpCLM")
eco_run("maple", 20, "InlEmpCLM")
eco_run("red maple", 20, "InlEmpCLM")
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
df
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df
# Remove duplicates
df <- unique(df)
df
# Remove duplicates
df <- unique(df)
df
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
df
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
df
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
df
invisible(df[["species_code"]])
invisible(df[["species_code"]][1])
df[["species_code"]][1]
devtools::load_all(".")
eco_run("maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("maple", 20, "InlEmpCLM")
eco_run("maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("maple", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("maple", 20, "InlEmpCLM")
eco_run("douglad fir", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("douglad fir", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("douglad fir", 20, "InlEmpCLM")
eco_run("douglas fir", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("douglas fir", 20, "InlEmpCLM")
eco_run("douglad fir", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("douglad fir", 20, "InlEmpCLM")
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
df
df$common_name == "maple"
df$common_name[1] == "apple"
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
if (df$common_name[1] == "apple") {
df
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
invisible(df[["species_code"]][1])
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
if (df$common_name[1] == "apple") {
NULL
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
invisible(df[["species_code"]][1])
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
if (df$common_name[1] == "apple") {
return()
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
invisible(df[["species_code"]][1])
return(NULL)
if (df$common_name[1] == "apple") {
return(NULL)
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
df$common_name[1] == "apple"
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
if (df$common_name[1] == "apple") {
invisible(df[["species_code"]][1])
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
if (df$common_name[1] == "aple") {
invisible(df[["species_code"]][1])
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
guess_message <- message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
ifelse(df$common_name[1] == "aple", invisible(df[["species_code"]][1]), guess_message)
# String similarity function
string_dist <- function(str_1, str_2) {
1 - (adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
# Make common input lower case
common <- tolower("maple")
# Load species data
df <- treeco::species_data
# Grab variables we need
df <- df[c("species_code", "common_name", "species_region")]
# Filter by region
df <- df[df$species_region == "InlEmpCLM", ]
df <- df[c("species_code", "common_name")]
# Remove duplicates
df <- unique(df)
# Make common_name variable lower case
df$common_name <- tolower(df$common_name)
# Compute similarity score
df$similarity_score <- string_dist(df$common_name, "maple")
# Extract max match score (what about cases where two scores == max score??)
df <- df[df$similarity_score == max(df$similarity_score), ]
guess_message <- message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
ifelse(df$common_name[1] == "aple", invisible(df[["species_code"]][1]), guess_message)
if (df$common_name[1] == "aple") {
invisible(df[["species_code"]][1])
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
x <- if (df$common_name[1] == "aple") {
invisible(df[["species_code"]][1])
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
}
x
x <- if (df$common_name[1] == "aple") {
invisible(df[["species_code"]][1])
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = ""),
invisible(df[["species_code"]][1])
}
x <- if (df$common_name[1] == "aple") {
invisible(df[["species_code"]][1])
} else {
message("Entered '", common, "'. Using closest match: '", df$common_name[1], "'.", sep = "")
invisible(df[["species_code"]][1])
}
x
devtools::load_all(".")
eco_run("douglad fir", 20, "InlEmpCLM")
eco_run("douglas fir", 20, "InlEmpCLM")
library(treeco)
eco_demo()
library(treeco)
eco_run("maple", 20, "InlEmpCLM")
eco_run("red maple", 20, "InlEmpCLM")
eco_run("douglas fir", 20, "InlEmpCLM")
x <- eco_run("douglad fir", 20, "InlEmpCLM")
x
devtools::install_github("tylurp/treeco")
library(treeco)
treeco::eco_data
treeco::species_data
library(tidyverse)
treeco::species_data %>%
as_tibble() %>%
select(common_name)
treeco::species_data %>%
as_tibble() %>%
select(common_name) %>%
filter(common_name == "Apple")
treeco::species_data %>%
as_tibble() %>%
select(common_name, species_region) %>%
filter(common_name == "Apple")
treeco::species_data %>%
as_tibble() %>%
select(common_name, species_region) %>%
filter(common_name == "Apple") %>% View()
library(treeco)
eco_demo()
eco_run("comon fig", 20, "InlEmpCLM")
eco_run("comon", 20, "InlEmpCLM")
eco_run("c", 20, "InlEmpCLM")
eco_run("aracaria", 20, "InlEmpCLM")
eco_run("fig", 20, "InlEmpCLM")
eco_run("common", 20, "InlEmpCLM")
eco_run("comon fig", 20, "InlEmpCLM")
eco_run("common fig", 20, "InlEmpCLM")
library(treeco)
eco_run("common fig", 20, "InlEmpCLM")
eco_run("comon fig", 20, "InlEmpCLM")
library(treeco)
eco_run("modesto ash", 20, "InlEmpCLM")
eco_run("modeso ash", 20, "InlEmpCLM")
50.8*0.393701
devtools::load_all(".")
eco_demo()
eco_run("common fig", 20, "InlEmpCLM")
eco_run("common fig", 21, "InlEmpCLM")
devtools::load_all(".")
eco_demo()
devtools::load_all(".")
eco_demo()
devtools::load_all(".")
eco_demo()
library(treeco)
eco_demo()
eco_run("modest ash", 20, "InlEmpCLM")
tibble::as_tibble(eco_run("common fig", 20, "InlEmpCLM"))
tibble::as_tibble(eco_run("commo fig", 20, "InlEmpCLM"))
eco_run("common fig", 20, "InlEmpCLM")
