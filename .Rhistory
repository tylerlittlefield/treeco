dbh_col = "dbh",
region = "InlEmpCLM"
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(treeco)
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>%
as_tibble() %>%
tidyr::nest(id)
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>%
as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 150000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 150000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>%
as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 500000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 500000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>%
as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 5000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 5000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>%
as_tibble()
benefits <- data.table::as.data.table(treeco::benefits)
benefits[grepl(region, species_region)]
benefits[grepl("InlEmpCLM", species_region)]
benefits[grepl("InlEmpCLM", "species_region")]
benefits[, grepl(.SD), .SDcols = c("InlEmpCLM", "species_region")]
benefits[, grepl("InlEmpCLM", .SD), .SDcols = c("species_region")]
benefits[, grepl("InlEmpCLM", .SD), .SDcols = c("species_region")]
benefits[grepl(region, species_region)]
benefits[grepl("InlEmpCLM", "species_region")]
grepl("InlEmpCLM", benefits)
grepl("InlEmpCLM", benefits$species_region)
data.table::as.data.table(treeco::benefits)
benefits[grepl(region, species_region)]
benefits[grepl("InlEmpCLM", species_region)]
benefits[grepl("InlEmpCLM", quote("species_region"))]
benefits[grepl("InlEmpCLM", quote(species_region))]
benefits[grepl("InlEmpCLM", species_region)]
benefits[grepl("InlEmpCLM", benefits$species_region)]
benefits[grepl("InlEmpCLM", species_region)]
benefits[grepl("InlEmpCLM", benefits$species_region)]
old <- benefits[grepl("InlEmpCLM", species_region)]
new <- benefits[grepl("InlEmpCLM", benefits$species_region)]
all.equal(old, new)
treeco::species$species_code
devtools::load_all(".")
treeco::eco_run("Common ig", 20, "InlEmpCLM")
treeco::eco_run("Common ig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
devtools::load_all(".")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
devtools::install_github("tylurp/treeco")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("Common fig", 20, "InlEmpCLM")
eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("Common fig", 20, "InlEmpCLM")
eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
eco_run("Common fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("Common fig", 20, "InlEmpCLM")
treeco::eco_run("Common fig", 20, "InlEmpCLM")
devtools::load_all(".")
eco_run("Common fig", 20, "InlEmpCLM")
eco_run("Common fig", 20, "InlEmpCLM")
usethis::use_coverage()
install.packages("covr")
usethis::use_coverage()
covr::report()
as.data.frame(covr::report())
usethis::use_test("eco_run")
eco_run("common fig", 20, "InlEmpCLM")
eco_run("common ig", 20, "InlEmpCLM")
eco_run("common ig", 20, "InlEmpCLM")[[1]]
unique(eco_run("common ig", 20, "InlEmpCLM")[[1]])
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
covr::report()
length(eco_run("Common fig", 20, "InlEmpCLM"))
length(eco_run("Common fig", 20, "InlEmpCLM")[,1])
length(eco_run("Common fig", 20, "InlEmpCLM")[1,])
eco_run("Common fig", 20, "InlEmpCLM")
eco_run("Common fig", 20, "InlEmpCLM")[1]
eco_run("Common fig", 20, "InlEmpCLM")[,1]
length(eco_run("Common fig", 20, "InlEmpCLM")[,1])
dim(eco_run("Common fig", 20, "InlEmpCLM")[,1])
dim(eco_run("Common fig", 20, "InlEmpCLM"))
devtools::test()
covr::report()
str(eco_run("Common fig", 20, "InlEmpCLM"))
str(eco_run("Common fig", 20, "InlEmpCLM"))[1]
str(eco_run("Common fig", 20, "InlEmpCLM")[1])
str(eco_run("Common fig", 20, "InlEmpCLM")[[1]])
str(eco_run("Common fig", 20, "InlEmpCLM")$common_name)
is.character(eco_run("Common fig", 20, "InlEmpCLM")$common_name)
devtools::test
devtools::test()
str(eco_run("Common fig", 20, "InlEmpCLM")$common_name)
str(eco_run("Common fig", 20, "InlEmpCLM"))
devtools::test()
covr::report()
usethis::use_test("eco_guess")
species <- rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=1)
df_species <- data.frame(botanical_name = species)
df_species
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
common_guess
common_guess$field_guess %in% species$common
common_guess$field_guess %in% treeco::species$common
devtools::test()
devtools::test()
# Common guess toy data frame
botanical_species <- rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=1)
df_botanical <- data.frame(botanical_name = botanical_species)
common_guess <- eco_guess(
data = df_botanical,
have = "botanical_name",
guess = "common"
)
common_guess$field_guess %in% treeco::species$common_name, TRUE
common_guess$field_guess %in% treeco::species$common_name
devtools::test()
covr::report()
usethis::use_test("eco_run_all")
devtools::test()
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 10)
df_species <- data.frame(botanical_name = species)
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 10)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM"
)
devtools::test()
covr::report()
devtools::load_all(".")
eco_run("Comon fig", 20, "InlEmpCLM")
