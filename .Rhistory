# Lower case for user data and species master list in hopes it improve the
# guessing.
tree_vec <- unique(tolower(as.character(data)))
field_vec <- unique(tolower(species))
# Remove NA's from them both.
tree_vec <- tree_vec[!is.na(tree_vec)]
field_vec <- field_vec[!is.na(field_vec)]
# Remove punctuation.
tree_vec <- gsub('[[:punct:]]+', '', tree_vec)
field_vec <- gsub('[[:punct:]]+', '', field_vec)
# Trim any white space.
tree_vec <- trimws(tree_vec, "both")
field_vec <- trimws(field_vec, "both")
field_idx <- unlist(lapply(tree_vec, function(x) which.max(string_dist(x, field_vec))))
if(field == "common") {field_vec <- treeco::species$common_name[field_idx]}
if(field == "botanical") {field_vec <- treeco::species$scientific_name[field_idx]}
tree_df <- data.frame(
original = tree_vec,
guess = field_vec
)
return(tree_df)
}
# Run
eco_guess(df$common_name, "botanical")
# Begin function
eco_guess <- function(data, field) {
# Which field is it? Common or botanical?
if(field == "common") {species <- treeco::species$scientific_name}
if(field %in% c("botanical", "scientific")) {species <- treeco::species$common_name}
# Lower case for user data and species master list in hopes it improve the
# guessing.
tree_vec <- unique(tolower(as.character(data)))
field_vec <- unique(tolower(species))
# Remove NA's from them both.
tree_vec <- tree_vec[!is.na(tree_vec)]
field_vec <- field_vec[!is.na(field_vec)]
# Remove punctuation.
tree_vec <- gsub('[[:punct:]]+', '', tree_vec)
field_vec <- gsub('[[:punct:]]+', '', field_vec)
# Trim any white space.
tree_vec <- trimws(tree_vec, "both")
field_vec <- trimws(field_vec, "both")
field_idx <- unlist(lapply(tree_vec, function(x) which.max(string_dist(x, field_vec))))
if(field == "common") {field_vec <- treeco::species$common_name[field_idx]}
if(field == "botanical") {field_vec <- treeco::species$scientific_name[field_idx]}
tree_df <- data.frame(
original = tree_vec,
guess = field_vec
)
return(tree_df)
}
# Run
eco_guess(df$common_name, "botanical")
# Begin function
eco_guess <- function(data, have, guess) {
# Which field is it? Common or botanical?
if(guess == "common") {species <- treeco::species$scientific_name}
if(guess %in% c("botanical", "scientific")) {species <- treeco::species$common_name}
# Lower case for user data and species master list in hopes it improve the
# guessing.
tree_vec <- unique(tolower(as.character(data[[have]])))
field_vec <- unique(tolower(species))
# Remove NA's from them both.
tree_vec <- tree_vec[!is.na(tree_vec)]
field_vec <- field_vec[!is.na(field_vec)]
# Remove punctuation.
tree_vec <- gsub('[[:punct:]]+', '', tree_vec)
field_vec <- gsub('[[:punct:]]+', '', field_vec)
# Trim any white space.
tree_vec <- trimws(tree_vec, "both")
field_vec <- trimws(field_vec, "both")
field_idx <- unlist(lapply(tree_vec, function(x) which.max(string_dist(x, field_vec))))
if(guess == "common") {field_vec <- treeco::species$common_name[field_idx]}
if(guess == "botanical") {field_vec <- treeco::species$scientific_name[field_idx]}
tree_df <- data.frame(
original = tree_vec,
field_guess = field_vec
)
return(tree_df)
}
# Run
eco_guess(df, common_name, "botanical")
# Run
eco_guess(df, "common_name", "botanical")
# Run
eco_guess(df, "botanical_name", "botanical")
df
# Run
eco_guess(df, "botanical_name", "common")
# Run
eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
# Begin function
eco_guess <- function(data, have, guess) {
# Which field is it? Common or botanical?
if(guess == "common") {species <- treeco::species$scientific_name}
if(guess %in% c("botanical", "scientific")) {species <- treeco::species$common_name}
# Lower case for user data and species master list in hopes it improve the
# guessing.
tree_vec <- unique(tolower(as.character(data[[have]])))
field_vec <- unique(tolower(species))
# Remove NA's from them both.
tree_vec <- tree_vec[!is.na(tree_vec)]
field_vec <- field_vec[!is.na(field_vec)]
# Remove punctuation.
tree_vec <- gsub('[[:punct:]]+', '', tree_vec)
field_vec <- gsub('[[:punct:]]+', '', field_vec)
# Trim any white space.
tree_vec <- trimws(tree_vec, "both")
field_vec <- trimws(field_vec, "both")
# Grab the index of the highest match for each unique tree
field_idx <- unlist(lapply(tree_vec, function(x) which.max(string_dist(x, field_vec))))
# Grab the guessed species
if(guess == "common") {field_vec <- treeco::species$common_name[field_idx]}
if(guess == "botanical") {field_vec <- treeco::species$scientific_name[field_idx]}
# Store as data.frame
tree_df <- data.frame(
original = tree_vec,
field_guess = field_vec
)
return(tree_df)
}
# Run
eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
devtools::load_all(".")
devtools::load_all(".")
eco_run("common_fif", 20, "InlEmpCLM")
df <- data.frame(
common_name = c("Common fig", "Common fig", "Deodar' Cedar", NA),
botanical_name = c("Ficus carica", NA, "Cedrus deodara ", "Ficus carica")
)
# Run
eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
devtools::load_all(".")
devtools::install_github("tylurp/treeco")
# Toy data
df <- data.frame(
common_name = c("Common fig", "Common fig", "Deodar' Cedar", NA),
botanical_name = c("Ficus carica", NA, "Cedrus deodara ", "Ficus carica")
)
# Run
treeco::eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
# Toy data
df <- data.frame(
common_name = c("Common fig", "Common fig", "Deodar' Cedar", NA)
)
# Run
treeco::eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
# Toy data
df <- data.frame(
botanical_name = c("Ficus carica", NA, "Cedrus deodara ", "Ficus carica")
)
# Run
treeco::eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
df
# Run
treeco::eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
#' @description This function tries to guess the botanical or common name of
#' tree for users with only one of these fields, not both. Since \code{eco_run}
#' attempts to find matches in both common and botanical, running this can
#' increase the number of records you can grab to run eco benefits.
#'
#' @param data A vector containing "common" or "botanical" names.
#' @param have The name of the existing field.
#' @param guess The missing field, either "common" or "botanical".
#'
#' @export
eco_guess <- function(data, have, guess) {
# Which field is it? Common or botanical?
if(guess == "common") {species <- treeco::species$scientific_name}
if(guess %in% c("botanical", "scientific")) {species <- treeco::species$common_name}
# Lower case for user data and species master list in hopes it improve the
# guessing.
tree_vec <- unique(tolower(as.character(data[[have]])))
field_vec <- unique(tolower(species))
# Remove NA's from them both.
tree_vec <- tree_vec[!is.na(tree_vec)]
field_vec <- field_vec[!is.na(field_vec)]
# Remove punctuation.
tree_vec <- gsub('[[:punct:]]+', '', tree_vec)
field_vec <- gsub('[[:punct:]]+', '', field_vec)
# Trim any white space.
tree_vec <- trimws(tree_vec, "both")
field_vec <- trimws(field_vec, "both")
# Grab the index of the highest match for each unique tree
field_idx <- unlist(lapply(tree_vec, function(x) which.max(string_dist(x, field_vec))))
# Grab the guessed species
if(guess == "common") {field_vec <- treeco::species$common_name[field_idx]}
if(guess == "botanical") {field_vec <- treeco::species$scientific_name[field_idx]}
# Store as data.frame
tree_df <- data.frame(
original = tree_vec,
field_guess = field_vec
)
return(tree_df)
}
eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
devtools::load_all(".")
eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
df
eco_guess(
data = df,
have = "botanical_name",
guess = "common"
)
library(treeco)
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM"
) %>% as_tibble()
devtools::load_all(".")
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM"
) %>% as_tibble()
devtools::load_all(".")
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM"
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM"
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
library(treeco)
library(dplyr)
# Grab a random sample of 15,000 botanical names. We can do this two ways, using
# this one liner:
rep(sample(unique(treeco::species$scientific_name), size = 50), length.out=15000)
# Or...
species <- treeco::species
unique_species <- unique(species$scientific_name)
unique_species_sample <- sample(unique_species, size = 50)
species <- rep(unique_species_sample, length.out = 15000)
# Then construct a dataframe.
df_species <- data.frame(botanical_name = species)
# In this scenario, we only have the botanical names, we can use eco_guess to
# guess the common names given the botanical names in our inventory. The data
# I'm using is from i-Tree's species master list so I will have 100% matches,
# this isn't usually the case for real data.
common_guess <- treeco::eco_guess(
data = df_species,
have = "botanical_name",
guess = "common"
)
# Select required variables
my_inventory <- common_guess[c("original", "field_guess")]
# Add a DBH column
my_inventory$dbh <- rep(sample(2:45), length.out = 15000)
names(my_inventory)[1] <- "botanical"
names(my_inventory)[2] <- "common"
treeco::eco_run_all(
data = my_inventory,
common_col = "common",
botanical_col = "botanical",
dbh_col = "dbh",
region = "InlEmpCLM",
print_time = TRUE
) %>% as_tibble()
