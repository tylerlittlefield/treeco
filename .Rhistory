# Select variables we need
fig <- fig[c("scientific_name", "common_name", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
fig$dbh_diff <- abs(fig$dbh_val - fig$dbh_range)
# Order dbh_diff in ascending order
fig <- fig[order(fig$dbh_diff, decreasing = FALSE), ]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
fig <- fig[stats::ave(fig$dbh_diff, fig$benefit, fig$common_name, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
fig <- fig[order(fig$dbh_range, fig$benefit, decreasing = FALSE), ]
# Set up variables for interpolation function
fig$x1 <- min(fig$dbh_range)
fig$x2 <- max(fig$dbh_range)
fig$y1 <- fig[stats::ave(fig$benefit_value, fig$benefit, fig$common_name, FUN = seq_along) == 1, ][["benefit_value"]]
fig$y2 <- fig[stats::ave(fig$benefit_value, fig$benefit, fig$common_name, FUN = seq_along) == 2, ][["benefit_value"]]
# Remove duplicate benefits, change grouping common_name to an ID variable
fig <- fig[!duplicated(fig[,c('common_name', 'benefit')]),]
# Run interpolation function
fig$benefit_value <- eco_interp(x = fig$dbh_val, x1 = fig$x1, x2 = fig$x2, y1 = fig$y1, y2 = fig$y2)
# Round benefit values to second second digit
fig$benefit_value <- round(fig$benefit_value, digits = 4)
# Select variables we need
fig <- fig[c("scientific_name", "common_name", "dbh_val", "benefit_value", "benefit", "unit")]
fig <- fig[order(fig$common_name), ]
# Rename dbh_val to dbh
names(fig)[names(fig) == "dbh_val"] <- "dbh"
# Reset row names
rownames(fig) <- NULL
fig
library(treeco)
# Interpolation function
eco_interp <- function(x, x1, y1, x2, y2) {
y <- ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Example data
fig <- data.frame(
species_code = c("FICA", "ROPS"),
dbh_val = c(50.8, 31.8) # Need argument for units so we can convert inches to centimeters
)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == "InlEmpCLM", ]
species_tbl <- species_data[species_data$species_region == "InlEmpCLM", ]
# Select variables we need
species_tbl <- species_tbl[1:5]
# Join species_tbl to fig example data
fig <- merge(
x = species_tbl,
y = fig,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE
)
fig
library(treeco)
# Interpolation function
eco_interp <- function(x, x1, y1, x2, y2) {
y <- ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Example data
fig <- data.frame(
species_code = c("FICA", "ROPS"),
dbh_val = c(50.8, 31.8) # Need argument for units so we can convert inches to centimeters
)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == "InlEmpCLM", ]
species_tbl <- species_data[species_data$species_region == "InlEmpCLM", ]
# Select variables we need
species_tbl <- species_tbl[1:5]
# Join species_tbl to fig example data
fig <- merge(
x = species_tbl,
y = fig,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE
)
# Remove duplicates, this wasn't required before, figure this out
fig <- fig[!duplicated(fig[, "species_code"]),]
# Join fig to eco_tbl
fig <- merge(
x = fig,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE
)
# Select variables we need
fig <- fig[c("scientific_name", "common_name", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
fig$dbh_diff <- abs(fig$dbh_val - fig$dbh_range)
# Order dbh_diff in ascending order
fig <- fig[order(fig$dbh_diff, decreasing = FALSE), ]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
fig <- fig[stats::ave(fig$dbh_diff, fig$benefit, fig$common_name, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
fig <- fig[order(fig$dbh_range, fig$benefit, decreasing = FALSE), ]
fig
# Set up variables for interpolation function
fig$x1 <- min(fig$dbh_range)
fig$x2 <- max(fig$dbh_range)
fig$y1 <- fig[stats::ave(fig$benefit_value, fig$benefit, fig$common_name, FUN = seq_along) == 1, ][["benefit_value"]]
fig$y2 <- fig[stats::ave(fig$benefit_value, fig$benefit, fig$common_name, FUN = seq_along) == 2, ][["benefit_value"]]
fig
# Remove duplicate benefits, change grouping common_name to an ID variable
fig <- fig[!duplicated(fig[,c('common_name', 'benefit')]),]
# Run interpolation function
fig$benefit_value <- eco_interp(x = fig$dbh_val, x1 = fig$x1, x2 = fig$x2, y1 = fig$y1, y2 = fig$y2)
# Round benefit values to second second digit
fig$benefit_value <- round(fig$benefit_value, digits = 4)
# Select variables we need
fig <- fig[c("scientific_name", "common_name", "dbh_val", "benefit_value", "benefit", "unit")]
fig <- fig[order(fig$common_name), ]
fig
eco_demo(
)
eco_interp <- function(x, x1, y1, x2, y2) {
y <- ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Example data
fig <- data.frame(
species_code = "FICA",
dbh_val = 20 * 2.54 # Need argument for units so we can convert inches to centimeters
)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == "InlEmpCLM", ]
species_tbl <- species_data[species_data$species_region == "InlEmpCLM", ]
# Select variables we need
species_tbl <- species_tbl[1:5]
# Join species_tbl to fig example data
fig <- merge(
x = species_tbl,
y = fig,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE
)
devtools::load_all(".")
eco_demo()
devtools::load_all(".")
eco_demo()
eco_run("ROPS", 12.5, "InlEmpCLM")
devtools::install_github("tylurp/treeco")
library(treeco)
library(tidyverse)
species_data
species_data %>%
select(common_name)
species_data %>%
select(common_name) %>%
spread()
species_data %>%
select(common_name) %>%
spread(key, value)
species_data %>%
select(common_name) %>%
mutate(key = common_name) %>%
spread(key, common_name)
library(tidyverse)
species_data %>%
select(common_name) %>%
rownames_to_column()
species_data %>%
select(common_name) %>%
rownames_to_column() %>%
spread(name, common_name)
species_data %>%
select(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name)
species_data %>%
select(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
species_data %>%
select(common_name) %>%
rownames_to_column("id") %>%
spread(common_name, id) %>%
as_tibble()
species_data %>%
select(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
species_data %>%
select(common_name)
species_data %>%
select(common_name) %>%
flatten_chr()
x <- species_data %>%
select(common_name) %>%
flatten_chr()
species_data %>%
select(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
y <- species_data %>%
select(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
names(y) <- x
y
species_data %>%
select(common_name) %>%
flatten_chr()
species_data %>%
select(common_name) %>%
flatten_chr() %>%
order()
species_data %>%
select(common_name) %>%
flatten_chr() %>%
arrange()
species_data %>%
select(common_name)
species_data %>%
select(common_name) %>%
arrange(common_name)
species_data %>%
select(common_name) %>%
arrange(common_name) %>%
flatten_chr()
species_data %>%
select(common_name) %>%
arrange(common_name) %>%
flatten_chr() %>%
unique()
x <- species_data %>%
select(common_name) %>%
arrange(common_name) %>%
flatten_chr() %>%
unique()
species_data %>%
select(common_name) %>%
distinct()
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name)
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name)
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
flatten_chr()
x <- species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
flatten_chr()
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
y <- species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
names(y) <- x
y
species_data
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
rownames_to_column("id") %>%
spread(id, common_name) %>%
as_tibble()
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name)
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble()
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble() %>%
mutate(key = common_name)
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble() %>%
mutate(key = common_name) %>%
spread(key, common_name)
species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble() %>%
mutate(key = common_name) %>%
spread(key, common_name) %>%
select(-V1)
species <- species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble() %>%
mutate(key = common_name) %>%
spread(key, common_name) %>%
select(-V1)
species$`Afghan pine`
species
write.csv(species, "data/species_names.csv")
library(treeco)
library(tidyverse)
species <- species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble() %>%
mutate(key = common_name) %>%
spread(key, common_name) %>%
select(-V1)
# Interpolation function
eco_interp <- function(x, x1, y1, x2, y2) {
y <- ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == "InlEmpCLM", ]
species_tbl <- species_data[species_data$species_region == "InlEmpCLM", ]
# Get species code based on common_name
species_data[species_data$common_name == species$`Common fig`]
# Get species code based on common_name
species_data[species_data$common_name == species$`Common fig`, ]
# Get species code based on common_name
species_tbl[species_tbl$common_name == species$`Common fig`, ]
# Get species code based on common_name
species_tbl[species_tbl$common_name == species$`Common fig`, ][["species_code"]]
# Get species code based on common_name
sp_code <- species_tbl[species_tbl$common_name == species$`Common fig`, ][["species_code"]]
# Example data
fig <- data.frame(
species_code = sp_code,
dbh_val = 20 * 2.54 # Need argument for units so we can convert inches to centimeters
)
fig
# Select variables we need
species_tbl <- species_tbl[1:5]
# Join species_tbl to fig example data
fig <- merge(
x = species_tbl,
y = fig,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE
)
# Remove duplicates, this wasn't required before, figure this out
# fig <- subset(fig, !duplicated(fig$species_code))
fig <- fig[!duplicated(fig[, "species_code"]),]
# Join fig to eco_tbl
fig <- merge(
x = fig,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE
)
# Select variables we need
fig <- fig[c("scientific_name", "common_name", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
fig$dbh_diff <- abs(fig$dbh_val - fig$dbh_range)
# Order dbh_diff in ascending order
fig <- fig[order(fig$dbh_diff, decreasing = FALSE), ]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
fig <- fig[stats::ave(fig$dbh_diff, fig$benefit, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
fig <- fig[order(fig$dbh_range, fig$benefit, decreasing = FALSE), ]
# Set up variables for interpolation function
fig$x1 <- min(fig$dbh_range)
fig$x2 <- max(fig$dbh_range)
fig$y1 <- fig[stats::ave(fig$benefit_value, fig$benefit, FUN = seq_along) == 1, ][["benefit_value"]]
fig$y2 <- fig[stats::ave(fig$benefit_value, fig$benefit, FUN = seq_along) == 2, ][["benefit_value"]]
# Remove duplicate benefits
# fig <- subset(fig, !duplicated(fig$benefit))
fig <- fig[!duplicated(fig[, "benefit"]),]
# Run interpolation function
fig$benefit_value <- eco_interp(x = fig$dbh_val, x1 = fig$x1, x2 = fig$x2, y1 = fig$y1, y2 = fig$y2)
# Round benefit values to second second digit
fig$benefit_value <- round(fig$benefit_value, digits = 4)
# Select variables we need
fig <- fig[c("scientific_name", "common_name", "dbh_val", "benefit_value", "benefit", "unit")]
# Rename dbh_val to dbh
names(fig)[names(fig) == "dbh_val"] <- "dbh"
# Reset row names
rownames(fig) <- NULL
fig
library(treeco)
library(tidyverse)
species_names <- species_data %>%
select(common_name) %>%
distinct() %>%
arrange(common_name) %>%
as_tibble() %>%
mutate(key = common_name) %>%
spread(key, common_name) %>%
select(-V1)
# Interpolation function
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
#' Run eco benefits for a tree
#'
#' @param species species code, see \code{species_data}
#' @param dbh dbh value, any positive number
#' @param region region code, see \code{species_data} or \code{eco_data}
#'
#' @export
eco_run <- function(species, dbh, region) {
# Debugging procedure, make sure datatypes are sound
ifelse(is.character(species), species, stop("Species value must be character type."))
ifelse(is.numeric(dbh), dbh, stop("DBH value must be numeric type."))
ifelse(is.character(region), region, stop("Region value must be character type."))
ifelse(dbh > 0, dbh, stop("DBH value must be > 0."))
# Get species code based on common_name
species <- species_tbl[species_tbl$common_name == species, ][["species_code"]]
# Construct dataframe
tree_tbl <- data.frame(
species_code = species,
dbh_val = dbh * 2.54 # Need argument for units so we can convert inches to centimeters
)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[1:5]
# Join species_tbl to tree_tbl example data
tree_tbl <- merge(x = species_tbl,
y = tree_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
# tree_tbl <- subset(tree_tbl, !duplicated(tree_tbl$species_code))
tree_tbl <- tree_tbl[!duplicated(tree_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
tree_tbl <- merge(x = tree_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
tree_tbl <- tree_tbl[c("scientific_name", "common_name", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
tree_tbl$dbh_diff <- abs(tree_tbl$dbh_val - tree_tbl$dbh_range)
# Order dbh_diff in ascending order
tree_tbl <- tree_tbl[order(tree_tbl$dbh_diff, tree_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
tree_tbl <- tree_tbl[stats::ave(tree_tbl$dbh_diff, tree_tbl$benefit, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
tree_tbl <- tree_tbl[order(tree_tbl$dbh_range, tree_tbl$benefit, decreasing = FALSE),]
# Set up variables for interpolation function
tree_tbl$x1 <- min(tree_tbl$dbh_range)
tree_tbl$x2 <- max(tree_tbl$dbh_range)
tree_tbl$y1 <- tree_tbl[stats::ave(tree_tbl$benefit_value, tree_tbl$benefit, FUN = seq_along) == 1, ][["benefit_value"]]
tree_tbl$y2 <- tree_tbl[stats::ave(tree_tbl$benefit_value, tree_tbl$benefit, FUN = seq_along) == 2, ][["benefit_value"]]
# Remove duplicate benefits
# tree_tbl <- subset(tree_tbl, !duplicated(tree_tbl$benefit))
tree_tbl <- tree_tbl[!duplicated(tree_tbl[, "benefit"]),]
# Run interpolation function
tree_tbl$benefit_value <- eco_interp(x = tree_tbl$dbh_val, x1 = tree_tbl$x1, x2 = tree_tbl$x2, y1 = tree_tbl$y1, y2 = tree_tbl$y2)
# Round benefit values to second second digit
tree_tbl$benefit_value <- round(tree_tbl$benefit_value, digits = 4)
# Select variables we need
tree_tbl <- tree_tbl[c("scientific_name", "common_name", "dbh_val", "benefit_value", "benefit", "unit")]
# Rename dbh_val to dbh
names(tree_tbl)[names(tree_tbl) == 'dbh_val'] <- 'dbh'
# Reset row names
rownames(tree_tbl) <- NULL
return(tree_tbl)
}
eco_run(species_names$`Common fig`, 20, "InlEmpCLM")
eco_run(species_names$`Afghan pine`, 20, "InlEmpCLM")
species_data
species_data %>% View()
eco_run(species_names$`Afghan pine`, 20, "InlEmpCLM")
species_tbl
eco_run(species_names$Acuba, 20, "InlEmpCLM")
eco_run(species_names$Algarrobo, 20, "InlEmpCLM")
eco_run(species_names$`Red maple`, 20, "InlEmpCLM")
library(eco_data)
library(treeco)
species_data
name(species_data)
names(species_data)
species_data[c("species_code", "common_name"), ]
species_data
species_data[1]
species_data[c("species_code", "common_name")]
unique(species_data[c("species_code", "common_name")])
head(unique(species_data[c("species_code", "common_name")]))
