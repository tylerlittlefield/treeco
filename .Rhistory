trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_range, trees_tbl$benefit, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_range, trees_tbl$benefit, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = min), ]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = min(dbh_diff)), ]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) <= 1, ]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) == 1, ]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) == 2, ]
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_range, trees_tbl$benefit, decreasing = FALSE),]
trees_tbl$x1 <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) == 1, ]
trees_tbl$x2 <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) == 2, ]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) == 1, ]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) == 1, ][["dbh_range"]]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) == 1, ]
x[stats::ave(x$dbh_diff, x$benefit, x$id, FUN = seq_along) <= 2, ]
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_range, trees_tbl$benefit, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_range, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$id, trees_tbl$dbh_range, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$id, trees_tbl$dbh_range, decreasing = FALSE),]
trees_tbl$x1 <- trees_tbl[stats::ave(trees_tbl$id, FUN = min) dbh_range, ]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$id, trees_tbl$dbh_range, decreasing = FALSE),]
trees_tbl$x1 <- trees_tbl[stats::ave(trees_tbl$id, FUN = min) dbh_range, ]
return(trees_tbl)
}
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$id, trees_tbl$dbh_range, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x
x[ave(x$id, FUN = min)]
x[ave(x$id, FUN = min),]
x[ave(x$id, x$dbh_range, FUN = min),]
do.call(rbind, by(x, x$id, function(x) x[which.min(x$dbh_range), ] ))
by(x, x$id, function(x) x[which.min(x$dbh_range), ] )
do.call(rbind, by(x, x$id, function(x) x[which.min(x$dbh_range), ] ))
x
x[stats::ave(x$id, x$dbh_range, FUN = seq_along) == 1, ]
x[stats::ave(x$id, FUN = seq_along) == 1, ]
x[stats::ave(x$id, x$id, FUN = seq_along) == 1, ]
x[stats::ave(x$id, x$id, FUN = seq_along) == 1, ]
x
x$dbh_range
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x$dbh
x$dbh_range
eco_run_all <- function(data, species_col, dbh_col, region) {
# import data
trees_tbl <- read.csv(data,stringsAsFactors = FALSE)
trees_tbl$id <- 1:nrow(trees_tbl)
# Subset data by region
eco_tbl <- eco_data[eco_data$species_region == region, ]
species_tbl <- species_data[species_data$species_region == region, ]
# Select variables we need
species_tbl <- species_tbl[c("scientific_name", "common_name", "species_code", "spp_value_assignment")]
# reconfigure data
trees_tbl <- trees_tbl[c("id", species_col, dbh_col)]
trees_tbl[dbh_col] <- trees_tbl[dbh_col] * 2.54
string_dist <- function(str_1, str_2) {
1 - (utils::adist(str_1, str_2) / pmax(nchar(str_1), nchar(str_2)))
}
eco_interp <- function(x, x1, y1, x2, y2) {
y = ((x - x1) * (y2 - y1) / (x2 - x1)) + y1
return(y)
}
# Guess and grab species_codes
vector <- integer(0)
for (i in unique(trees_tbl[[2]]))
vector[i] <- which.max(string_dist(i, species_tbl$common_name))
trees_tbl$species_code <- species_tbl$species_code[vector]
# Eventually, clean up columns we need, keeping for debugging purposes
trees_tbl <- merge(x = species_tbl,
y = trees_tbl,
by.x = "species_code",
by.y = "species_code",
all.x = FALSE)
# Remove duplicates, this wasn't required before, figure this out
trees_tbl <- trees_tbl[!duplicated(trees_tbl[, "species_code"]),]
# Join tree_tbl to eco_tbl
trees_tbl <- merge(x = trees_tbl,
y = eco_tbl,
by.x = "spp_value_assignment",
by.y = "species_code",
all.x = TRUE)
# Select variables we need
trees_tbl <- trees_tbl[c("id", "scientific_name", "common_name.y", "dbh_val", "dbh_range", "benefit_value", "benefit", "unit")]
# Calculate absolute value of dbh - dbh_range
trees_tbl$dbh_diff <- abs(trees_tbl$dbh_val - trees_tbl$dbh_range)
# Order dbh_diff in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$dbh_diff, trees_tbl$benefit, decreasing = FALSE),]
# Grab the first two records grouped by benefit, this will be the lowest dbh_diff values
trees_tbl <- trees_tbl[stats::ave(trees_tbl$dbh_diff, trees_tbl$benefit, trees_tbl$id, FUN = seq_along) <= 2, ]
# Order dbh_range in ascending order
trees_tbl <- trees_tbl[order(trees_tbl$id, trees_tbl$dbh_range, decreasing = FALSE),]
return(trees_tbl)
}
x <- eco_run_all("toy.csv", "common_name", "dbh_val", "InlEmpCLM")
x$dbh_range
